#!make
include .env
export $(shell sed 's/=.*//' .env)
SELF_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
PHP_SERVICE := docker-compose exec $$PROJECT_NAME.php sh -c
PHP_BASH := docker exec -i -t $$PROJECT_NAME.php bash
PROJECT_PATH := /src
##
## ----------------------------------------------------------------------------
##   Environment
## ----------------------------------------------------------------------------
##

project-name:
	echo $$PROJECT_NAME

up: ## up docker-composer
	docker-compose up -d

build: ## Build docker files
	@sh ./init-docker.sh

down: ## down
	docker-compose down

php: ## access php
	docker exec -i -t $$PROJECT_NAME.php bash

nginx: ## access nginx
	docker exec -i -t $$PROJECT_NAME.nginx bash

docker-image: ## ls
	docker image ls

restart: ## ls
	docker-compose restart

console: ## install symfony
	$(PHP_SERVICE) "cd /src/ && ${cm}"

sf-install: ## install symfony
	$(PHP_SERVICE) "cd /src/ && composer create-project symfony/skeleton api && cp -a api/. . && rm -rf api/"
	$(PHP_SERVICE) "composer install --optimize-autoloader --prefer-dist --working-dir=$(PROJECT_PATH)"

sf-cache: ## Flush the Symfony cache
	$(PHP_SERVICE) "cd /src/ && bin/console cache:clear"

composer-require: ## Install Composer dependencies lib=PACOTE
	$(PHP_SERVICE) "cd /src/ && composer require ${lib}"

logs: ## Follow logs generated by all containers
	docker-compose logs -f --tail=0

logs-full: ## Follow logs generated by all containers from the containers creation
	docker-compose logs -f

ps: ## List all containers managed by the environment
	docker-compose ps

restore: ## Restore the "postgres" volume
	docker run --rm \
		--volumes-from $$(docker-compose ps -q postgres) \
		-v $$(pwd):/backup \
		busybox sh -c "tar xvf /backup/backup.tar /var/lib/postgresql/data"
	docker-compose restart postgres

stats: ## Print real-time statistics about containers ressources usage
	docker stats $(docker ps --format={{.Names}})

stop: ## Stop the environment
	docker-compose stop

yarn: ## Install npm dependencies from the "php" container
	$(PHP_SERVICE) "yarn install --cwd=$(PROJECT_PATH)"

.PHONY: backup build cache composer logs logs-full nginx php ps restore start stats stop yarn

.DEFAULT_GOAL := help
help:
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| sed -e 's/^.*Makefile://g' \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'
.PHONY: help
